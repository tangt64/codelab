apiVersion: v1
kind: Namespace
metadata:
  name: bg-demo
---
apiVersion: v1
kind: Service
metadata:
  name: bg-web-svc
  namespace: bg-demo
  labels:
    app: bg-web
spec:
  selector:
    app: bg-web
    version: blue         # ← green으로 패치하면 전환
  ports:
    - name: http
      port: 80
      targetPort: 8080
  type: ClusterIP
---
# Ingress (NGINX Ingress Controller 가정)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bg-web
  namespace: bg-demo
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
spec:
  rules:
    - host: bg.demo.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: bg-web-svc
                port:
                  number: 80
  # TLS를 쓰려면 주석 해제 + cert-manager 등으로 사전 발급
  # tls:
  # - hosts: [ "bg.demo.local" ]
  #   secretName: bg-web-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bg-web-blue
  namespace: bg-demo
spec:
  replicas: 2
  selector:
    matchLabels: { app: bg-web, version: blue }
  template:
    metadata:
      labels: { app: bg-web, version: blue }
    spec:
      containers:
        - name: app
          image: YOUR_REGISTRY/bgapp-gin:blue
          ports: [{ containerPort: 8080 }]
          env:
            - { name: APP_VERSION, value: "blue" }
            - { name: BG_SERVICE_NAME, value: "bg-web-svc" }
            - { name: VOLUME_PATH, value: "/data" }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          readinessProbe:
            httpGet: { path: /healthz, port: 8080 }
            initialDelaySeconds: 2
            periodSeconds: 5
          resources:
            requests: { cpu: "100m", memory: "64Mi" }
            limits:   { cpu: "500m", memory: "256Mi" }
          volumeMounts: [ { name: data, mountPath: /data } ]
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bg-web-green
  namespace: bg-demo
spec:
  replicas: 2
  selector:
    matchLabels: { app: bg-web, version: green }
  template:
    metadata:
      labels: { app: bg-web, version: green }
    spec:
      containers:
        - name: app
          image: YOUR_REGISTRY/bgapp-gin:green
          ports: [{ containerPort: 8080 }]
          env:
            - { name: APP_VERSION, value: "green" }
            - { name: BG_SERVICE_NAME, value: "bg-web-svc" }
            - { name: VOLUME_PATH, value: "/data" }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          readinessProbe:
            httpGet: { path: /healthz, port: 8080 }
            initialDelaySeconds: 2
            periodSeconds: 5
          resources:
            requests: { cpu: "100m", memory: "64Mi" }
            limits:   { cpu: "500m", memory: "256Mi" }
          volumeMounts: [ { name: data, mountPath: /data } ]
      volumes:
        - name: data
          emptyDir: {}
---
# HPA (blue용) - CPU 기준
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bg-web-blue-hpa
  namespace: bg-demo
spec:
  minReplicas: 2
  maxReplicas: 10
  behavior:
    scaleUp:
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bg-web-blue
---
# ServiceMonitor (Prometheus Operator 가정)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: bg-web
  namespace: bg-demo
  labels:
    release: prometheus   # Prometheus Operator의 selector와 맞춰주세요
spec:
  selector:
    matchLabels:
      app: bg-web
  namespaceSelector:
    matchNames: ["bg-demo"]
  endpoints:
    - port: http
      path: /metrics
      interval: 15s
      scrapeTimeout: 10s
---
# KEDA ScaledObject: Prometheus 트리거 (active_workers > 0 이면 스케일업)
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: bg-web-blue-keda
  namespace: bg-demo
spec:
  scaleTargetRef:
    kind: Deployment
    name: bg-web-blue
  minReplicaCount: 2
  maxReplicaCount: 10
  cooldownPeriod: 120
  triggers:
    - type: prometheus
      metadata:
        serverAddress: http://prometheus-operated.monitoring.svc:9090
        metricName: bgdemo_active_workers
        query: |
          max by (pod) (bgdemo_active_workers{namespace="bg-demo"})
        threshold: "0.5"
